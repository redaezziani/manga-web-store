MANGA WEB STORE - AUTHENTICATION ENDPOINTS GUIDE
================================================

Base URL: http://localhost:7000/api/auth

=== 1. REGISTER NEW USER ===
Endpoint: POST /register
Description: Create a new user account and send email verification

REQUEST:
{
  "email": "user@example.com",
  "password": "StrongPass123",
  "firstName": "John",          // Optional
  "lastName": "Doe",            // Optional
  "displayName": "JohnDoe"      // Optional
}

RESPONSE (Success - 201):
{
  "success": true,
  "message": "Registration successful",
  "data": {
    "user": {
      "id": "cm0x1y2z3...",
      "email": "user@example.com",
      "firstName": "John",
      "lastName": "Doe",
      "displayName": "JohnDoe",
      "avatar": null,
      "role": "USER",
      "status": "PENDING_VERIFICATION",
      "isEmailVerified": false,
      "createdAt": "2025-07-26T12:00:00.000Z"
    },
    "message": "Registration successful. Please check your email to verify your account."
  }
}

RESPONSE (Error - 409):
{
  "success": false,
  "message": "User with this email already exists",
  "data": null
}

=== 2. USER LOGIN ===
Endpoint: POST /login
Description: Authenticate user and return JWT token

REQUEST:
{
  "email": "user@example.com",
  "password": "StrongPass123"
}

RESPONSE (Success - 200):
{
  "success": true,
  "message": "Login successful",
  "data": {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "expiresIn": 86400,
    "user": {
      "id": "cm0x1y2z3...",
      "email": "user@example.com",
      "firstName": "John",
      "lastName": "Doe",
      "displayName": "JohnDoe",
      "avatar": null,
      "role": "USER",
      "status": "ACTIVE",
      "isEmailVerified": true,
      "createdAt": "2025-07-26T12:00:00.000Z"
    }
  }
}

RESPONSE (Error - 401):
{
  "success": false,
  "message": "Invalid credentials",
  "data": null
}

=== 3. VERIFY EMAIL ===
Endpoint: GET /verify-email?token=YOUR_TOKEN
Description: Verify user email address using token from email

REQUEST:
- Query Parameter: token (from email)
- Example: GET /verify-email?token=abc123def456...

RESPONSE (Success - 200):
{
  "success": true,
  "message": "Email verified successfully",
  "data": {
    "message": "Email verified successfully. Welcome to Manga Store!"
  }
}

RESPONSE (Error - 400):
{
  "success": false,
  "message": "Invalid or expired verification token",
  "data": null
}

=== 4. FORGOT PASSWORD ===
Endpoint: POST /forgot-password
Description: Send password reset email to user

REQUEST:
{
  "email": "user@example.com"
}

RESPONSE (Success - 200):
{
  "success": true,
  "message": "Password reset email sent",
  "data": {
    "message": "If an account with this email exists, a password reset link has been sent."
  }
}

=== 5. RESET PASSWORD ===
Endpoint: POST /reset-password
Description: Reset user password using token from email

REQUEST:
{
  "token": "token_from_email",
  "password": "NewStrongPass123"
}

RESPONSE (Success - 200):
{
  "success": true,
  "message": "Password reset successful",
  "data": {
    "message": "Password reset successful. Please log in with your new password."
  }
}

RESPONSE (Error - 400):
{
  "success": false,
  "message": "Invalid or expired reset token",
  "data": null
}

=== AUTHENTICATION HEADERS ===
For protected endpoints, include the JWT token in the Authorization header:
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

=== PASSWORD REQUIREMENTS ===
- Minimum 8 characters
- At least one uppercase letter
- At least one lowercase letter  
- At least one number
- Can include special characters: @$!%*?&

=== TOKEN INFORMATION ===
- Token Type: JWT (JSON Web Token)
- Expiration: 24 hours
- Usage: Include in Authorization header as "Bearer {token}"
- No refresh token system (single token approach)

=== ERROR HANDLING ===
All endpoints return consistent error format:
{
  "success": false,
  "message": "Error description",
  "data": null
}

Common HTTP Status Codes:
- 200: Success
- 201: Created (registration)
- 400: Bad Request (validation errors)
- 401: Unauthorized (invalid credentials)
- 409: Conflict (user already exists)

=== TESTING WITH CURL ===

Register:
curl -X POST http://localhost:7000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"TestPass123","firstName":"Test"}'

Login:
curl -X POST http://localhost:7000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"TestPass123"}'

Using Token:
curl -X GET http://localhost:7000/api/protected-endpoint \
  -H "Authorization: Bearer YOUR_JWT_TOKEN_HERE"

=== NOTES ===
- Email verification is required before full account activation
- Tokens expire after 24 hours
- Password reset tokens expire after 1 hour
- Email verification tokens expire after 24 hours
- All sensitive operations are logged for security
- CORS is enabled for frontend integration
