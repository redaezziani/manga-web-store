generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(cuid())
  name        String   
  nameAr      String   
  slug        String   @unique
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  mangas      Manga[]  @relation("MangaCategories")
}

model Manga {
  id           String       @id @default(cuid())
  title        String
  author       String?
  description  String?      @db.Text
  coverImage   String?
  isAvailable  Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  categories   Category[]   @relation("MangaCategories")
  volumes      Volume[]
  wishlists    Wishlist[]
  reviews      Review[]
}

model Volume {
  id          String   @id @default(cuid())
  volumeNumber Int
  price       Float
  discount    Float    @default(0)
  stock       Int      @default(0)
  coverImage  String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  manga       Manga    @relation(fields: [mangaId], references: [id])
  mangaId     String

  previewImages PreviewImage[]
  cartItems     CartItem[]
}

model PreviewImage {
  id        String   @id @default(cuid())
  url       String

  volume    Volume   @relation(fields: [volumeId], references: [id])
  volumeId  String
}

// Authentication System Models

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  password          String     // Will be hashed
  firstName         String?
  lastName          String?
  displayName       String?
  avatar            String?    // Profile picture URL
  role              UserRole   @default(USER)
  status            UserStatus @default(PENDING_VERIFICATION)
  isEmailVerified   Boolean    @default(false)
  emailVerifiedAt   DateTime?
  lastLoginAt       DateTime?
  lastActiveAt      DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  emailVerifications EmailVerification[]
  passwordResets     PasswordReset[]
  refreshTokens      RefreshToken[]
  loginHistory       LoginHistory[]
  userPreferences    UserPreferences?
  cart               Cart?
  wishlists          Wishlist[]
  reviews            Review[]

  @@map("users")
}

model EmailVerification {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  email       String   // Store email in case user changes it
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  usedAt      DateTime?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model PasswordReset {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  email       String   // Store email for reference
  expiresAt   DateTime
  isUsed      Boolean  @default(false)
  usedAt      DateTime?
  createdAt   DateTime @default(now())
  ipAddress   String?
  userAgent   String?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model RefreshToken {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  expiresAt   DateTime
  isRevoked   Boolean  @default(false)
  revokedAt   DateTime?
  createdAt   DateTime @default(now())
  ipAddress   String?
  userAgent   String?

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model LoginHistory {
  id          String   @id @default(cuid())
  userId      String
  ipAddress   String?
  userAgent   String?
  location    String?  // Country/City based on IP
  device      String?  // Mobile, Desktop, Tablet
  browser     String?
  isSuccessful Boolean @default(true)
  failureReason String? // If login failed
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_history")
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  language              String   @default("en") // en, ar
  theme                 String   @default("light") // light, dark
  emailNotifications    Boolean  @default(true)
  marketingEmails       Boolean  @default(false)
  securityAlerts        Boolean  @default(true)
  twoFactorEnabled      Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// User Shopping and Interaction Models

model Cart {
  id          String     @id @default(cuid())
  userId      String     @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]

  @@map("carts")
}

model CartItem {
  id          String   @id @default(cuid())
  cartId      String
  volumeId    String
  quantity    Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  volume      Volume   @relation(fields: [volumeId], references: [id], onDelete: Cascade)

  @@unique([cartId, volumeId])
  @@map("cart_items")
}

model Wishlist {
  id          String   @id @default(cuid())
  userId      String
  mangaId     String
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  manga       Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)

  @@unique([userId, mangaId])
  @@map("wishlists")
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  mangaId     String
  rating      Int      // 1-5 stars
  title       String?
  content     String?  @db.Text
  isVerified  Boolean  @default(false) // If user actually purchased
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  manga       Manga    @relation(fields: [mangaId], references: [id], onDelete: Cascade)

  @@unique([userId, mangaId])
  @@map("reviews")
}

